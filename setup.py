#!/usr/bin/env python3
"""
NeoFinX - Akƒ±llƒ± B√ºt√ße ve Harcama Asistanƒ±
Kurulum ve ba≈ülangƒ±√ß scripti
"""

import os
import sys
import subprocess
import sqlite3
from datetime import datetime

def create_database():
    """Veritabanƒ±nƒ± olu≈ütur ve temel tablolarƒ± ekle"""
    print("üìä Veritabanƒ± olu≈üturuluyor...")
    
    # SQLite veritabanƒ± dosyasƒ±
    db_path = 'data/neofinx.db'
    
    # Data klas√∂r√º olu≈ütur
    os.makedirs('data', exist_ok=True)
    
    # Veritabanƒ± baƒülantƒ±sƒ±
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()
    
    # Kullanƒ±cƒ±lar tablosu
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS users (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        email TEXT UNIQUE NOT NULL,
        password_hash TEXT NOT NULL,
        first_name TEXT NOT NULL,
        last_name TEXT NOT NULL,
        monthly_income REAL DEFAULT 0.0,
        currency TEXT DEFAULT 'TRY',
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    )
    ''')
    
    # Kategoriler tablosu
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS categories (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        name TEXT NOT NULL,
        icon TEXT DEFAULT 'üí∞',
        color TEXT DEFAULT '#007bff',
        parent_id INTEGER,
        is_active BOOLEAN DEFAULT 1,
        FOREIGN KEY (parent_id) REFERENCES categories (id)
    )
    ''')
    
    # Harcamalar tablosu
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS expenses (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER NOT NULL,
        category_id INTEGER NOT NULL,
        amount REAL NOT NULL,
        description TEXT,
        date DATE NOT NULL,
        location TEXT,
        payment_method TEXT DEFAULT 'cash',
        is_recurring BOOLEAN DEFAULT 0,
        recurring_frequency TEXT,
        tags TEXT,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY (user_id) REFERENCES users (id),
        FOREIGN KEY (category_id) REFERENCES categories (id)
    )
    ''')
    
    # B√ºt√ßeler tablosu
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS budgets (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER NOT NULL,
        category_id INTEGER,
        name TEXT NOT NULL,
        amount REAL NOT NULL,
        period TEXT DEFAULT 'monthly',
        start_date DATE NOT NULL,
        end_date DATE,
        is_active BOOLEAN DEFAULT 1,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY (user_id) REFERENCES users (id),
        FOREIGN KEY (category_id) REFERENCES categories (id)
    )
    ''')
    
    # Yatƒ±rƒ±m t√ºrleri tablosu
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS investment_types (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        name TEXT NOT NULL,
        symbol TEXT UNIQUE NOT NULL,
        type TEXT NOT NULL,
        icon TEXT DEFAULT 'üìà',
        currency TEXT DEFAULT 'TRY',
        api_source TEXT,
        is_active BOOLEAN DEFAULT 1,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    )
    ''')
    
    # Yatƒ±rƒ±mlar tablosu
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS investments (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER NOT NULL,
        investment_type_id INTEGER NOT NULL,
        amount REAL NOT NULL,
        quantity REAL NOT NULL,
        purchase_price REAL NOT NULL,
        purchase_date DATE NOT NULL,
        description TEXT,
        is_active BOOLEAN DEFAULT 1,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY (user_id) REFERENCES users (id),
        FOREIGN KEY (investment_type_id) REFERENCES investment_types (id)
    )
    ''')
    
    # Yatƒ±rƒ±m fiyat ge√ßmi≈üi tablosu
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS investment_prices (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        investment_type_id INTEGER NOT NULL,
        price REAL NOT NULL,
        timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY (investment_type_id) REFERENCES investment_types (id)
    )
    ''')
    
    # Varsayƒ±lan kategorileri ekle
    default_categories = [
        ('Yemek & ƒ∞√ßecek', 'üçΩÔ∏è', '#FF6B6B'),
        ('Ula≈üƒ±m', 'üöó', '#4ECDC4'),
        ('Eƒülence', 'üé¨', '#45B7D1'),
        ('Saƒülƒ±k', 'üè•', '#96CEB4'),
        ('Alƒ±≈üveri≈ü', 'üõçÔ∏è', '#FECA57'),
        ('Faturalar', 'üìã', '#FF9FF3'),
        ('Eƒüitim', 'üìö', '#54A0FF'),
        ('Ki≈üisel Bakƒ±m', 'üíÑ', '#5F27CD'),
        ('Spor', 'üèÉ', '#00D2D3'),
        ('Diƒüer', 'üì¶', '#C44569')
    ]
    
    for name, icon, color in default_categories:
        cursor.execute('''
        INSERT OR IGNORE INTO categories (name, color)
        VALUES (?, ?)
        ''', (name, color))
    
    # Varsayƒ±lan yatƒ±rƒ±m t√ºrlerini ekle
    default_investments = [
        ('Dolar', 'USD', 'currency', 'üíµ', 'USD'),
        ('Euro', 'EUR', 'currency', 'üí∂', 'EUR'),
        ('Sterlin', 'GBP', 'currency', 'üí∑', 'GBP'),
        ('Altƒ±n (Ons)', 'GOLD', 'precious_metal', 'ü•á', 'USD'),
        ('G√ºm√º≈ü (Ons)', 'SILVER', 'precious_metal', 'ü•à', 'USD'),
        ('Bitcoin', 'BTC', 'crypto', '‚Çø', 'USD'),
        ('Ethereum', 'ETH', 'crypto', '‚ü†', 'USD'),
        ('BIST 100', 'XU100', 'stock_index', 'üìä', 'TRY'),
        ('S&P 500', 'SPX', 'stock_index', 'üìà', 'USD'),
        ('Nasdaq', 'IXIC', 'stock_index', 'üíª', 'USD')
    ]
    
    for name, symbol, inv_type, icon, currency in default_investments:
        cursor.execute('''
        INSERT OR IGNORE INTO investment_types (name, symbol, type, icon, currency)
        VALUES (?, ?, ?, ?, ?)
        ''', (name, symbol, inv_type, icon, currency))
    
    # Finansal hedefler tablosu
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS financial_goals (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER NOT NULL,
        title TEXT NOT NULL,
        goal_type TEXT NOT NULL,
        target_amount REAL NOT NULL,
        current_amount REAL DEFAULT 0.0,
        target_date DATE NOT NULL,
        monthly_target REAL DEFAULT 0.0,
        description TEXT,
        is_active BOOLEAN DEFAULT 1,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    )
    ''')
    
    # Hedef katkƒ±larƒ± tablosu
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS goal_contributions (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        goal_id INTEGER NOT NULL,
        amount REAL NOT NULL,
        contribution_date DATE NOT NULL,
        description TEXT,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY (goal_id) REFERENCES financial_goals (id)
    )
    ''')
    
    # Vergi hesaplamalarƒ± tablosu
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS tax_calculations (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER NOT NULL,
        calculation_type TEXT NOT NULL,
        tax_year INTEGER NOT NULL,
        income_amount REAL DEFAULT 0.0,
        investment_gains REAL DEFAULT 0.0,
        deductions REAL DEFAULT 0.0,
        calculated_tax REAL DEFAULT 0.0,
        effective_rate REAL DEFAULT 0.0,
        calculation_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        notes TEXT,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY (user_id) REFERENCES users (id)
    )
    ''')
    
    # KDV takip tablosu (freelancer'lar i√ßin)
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS vat_tracking (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER NOT NULL,
        invoice_number TEXT,
        client_name TEXT NOT NULL,
        invoice_date DATE NOT NULL,
        invoice_amount REAL NOT NULL,
        vat_rate REAL DEFAULT 18.0,
        vat_amount REAL NOT NULL,
        payment_status TEXT DEFAULT 'pending',
        payment_date DATE,
        refund_eligible BOOLEAN DEFAULT 1,
        refund_requested BOOLEAN DEFAULT 0,
        refund_amount REAL DEFAULT 0.0,
        refund_date DATE,
        notes TEXT,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY (user_id) REFERENCES users (id)
    )
    ''')
    
    # Yatƒ±rƒ±m kazan√ßlarƒ± vergi tablosu
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS investment_tax (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER NOT NULL,
        investment_id INTEGER,
        investment_type TEXT NOT NULL,
        purchase_amount REAL NOT NULL,
        sale_amount REAL DEFAULT 0.0,
        gain_loss REAL DEFAULT 0.0,
        holding_period_days INTEGER DEFAULT 0,
        tax_rate REAL DEFAULT 0.0,
        tax_amount REAL DEFAULT 0.0,
        purchase_date DATE NOT NULL,
        sale_date DATE,
        is_exempt BOOLEAN DEFAULT 0,
        exemption_reason TEXT,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY (user_id) REFERENCES users (id),
        FOREIGN KEY (investment_id) REFERENCES investments (id)
    )
    ''')
    
    # Vergi optimizasyon √∂nerileri tablosu
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS tax_recommendations (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER NOT NULL,
        recommendation_type TEXT NOT NULL,
        title TEXT NOT NULL,
        description TEXT NOT NULL,
        potential_savings REAL DEFAULT 0.0,
        priority_level INTEGER DEFAULT 1,
        is_applied BOOLEAN DEFAULT 0,
        applied_date DATE,
        valid_until DATE,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY (user_id) REFERENCES users (id)
    )
    ''')
    
    # Vergi dilim tablosu (T√ºrkiye gelir vergisi dilimleri)
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS tax_brackets (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        tax_year INTEGER NOT NULL,
        bracket_min REAL NOT NULL,
        bracket_max REAL,
        tax_rate REAL NOT NULL,
        deduction_amount REAL DEFAULT 0.0,
        currency TEXT DEFAULT 'TRY',
        is_active BOOLEAN DEFAULT 1,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    )
    ''')
    
    # 2024 T√ºrkiye gelir vergisi dilimlerini ekle
    tax_brackets_2024 = [
        (0, 110000, 15.0, 0),
        (110000, 230000, 20.0, 5500),
        (230000, 580000, 27.0, 21600),
        (580000, 3000000, 35.0, 68000),
        (3000000, None, 40.0, 218000)
    ]
    
    for bracket_min, bracket_max, rate, deduction in tax_brackets_2024:
        cursor.execute('''
        INSERT OR IGNORE INTO tax_brackets (tax_year, bracket_min, bracket_max, tax_rate, deduction_amount)
        VALUES (?, ?, ?, ?, ?)
        ''', (2024, bracket_min, bracket_max, rate, deduction))
    
    # Varsayƒ±lan hedef ≈üablonlarƒ±
    default_goal_templates = [
        ('Ev Alma Hedefi', 'housing', 'üè†', 'Ev pe≈üinatƒ± veya tam √∂deme i√ßin tasarruf'),
        ('Emeklilik Planƒ±', 'retirement', 'üë¥', 'Rahat bir emeklilik i√ßin uzun vadeli tasarruf'),
        ('Acil Durum Fonu', 'emergency', 'üõ°Ô∏è', 'Beklenmedik durumlar i√ßin g√ºvenlik fonu'),
        ('Ara√ß Alma Hedefi', 'vehicle', 'üöó', 'Araba alƒ±mƒ± i√ßin tasarruf'),
        ('Eƒüitim Fonu', 'education', 'üéì', 'Kendiniz veya √ßocuklarƒ±nƒ±z i√ßin eƒüitim masraflarƒ±'),
        ('Tatil Fonu', 'vacation', '‚úàÔ∏è', 'Hayal ettiƒüiniz tatil i√ßin tasarruf'),
        ('Yatƒ±rƒ±m Hedefi', 'investment', 'üìà', 'Yatƒ±rƒ±m yapmak i√ßin ba≈ülangƒ±√ß sermayesi'),
        ('D√ºƒü√ºn Hedefi', 'wedding', 'üíç', 'D√ºƒü√ºn masraflarƒ± i√ßin tasarruf')
    ]
    
    # Hedef ≈üablonlarƒ± tablosu olu≈ütur
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS goal_templates (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        name TEXT NOT NULL,
        category TEXT NOT NULL,
        icon TEXT DEFAULT 'üéØ',
        description TEXT,
        typical_duration_months INTEGER DEFAULT 24,
        is_active BOOLEAN DEFAULT 1
    )
    ''')
    
    # Varsayƒ±lan ≈üablonlarƒ± ekle
    for name, category, icon, description in default_goal_templates:
        cursor.execute('''
        INSERT OR IGNORE INTO goal_templates (name, category, description)
        VALUES (?, ?, ?)
        ''', (name, category, description))
    
    conn.commit()
    conn.close()
    print("‚úÖ Veritabanƒ± ba≈üarƒ±yla olu≈üturuldu!")

def create_sample_data():
    """√ñrnek veriler olu≈ütur"""
    print("üìù √ñrnek veriler olu≈üturuluyor...")
    
    import pandas as pd
    import numpy as np
    from datetime import date, timedelta
    
    # Kategoriler
    categories = [
        'Yemek & ƒ∞√ßecek', 'Ula≈üƒ±m', 'Eƒülence', 'Saƒülƒ±k', 
        'Alƒ±≈üveri≈ü', 'Faturalar', 'Eƒüitim', 'Ki≈üisel Bakƒ±m', 'Spor', 'Diƒüer'
    ]
    
    # Son 6 ay i√ßin √∂rnek harcamalar
    np.random.seed(42)
    start_date = date.today() - timedelta(days=180)
    dates = [start_date + timedelta(days=x) for x in range(180)]
    
    sample_expenses = []
    for d in dates:
        # G√ºnde 1-4 harcama
        num_expenses = np.random.randint(1, 5)
        for _ in range(num_expenses):
            category = np.random.choice(categories)
            
            # Kategori bazlƒ± ger√ßek√ßi miktarlar
            if 'Yemek' in category:
                amount = np.random.normal(50, 20)
            elif 'Ula≈üƒ±m' in category:
                amount = np.random.normal(30, 10)
            elif 'Eƒülence' in category:
                amount = np.random.normal(100, 40)
            elif 'Saƒülƒ±k' in category:
                amount = np.random.normal(80, 30)
            elif 'Alƒ±≈üveri≈ü' in category:
                amount = np.random.normal(150, 60)
            elif 'Faturalar' in category:
                amount = np.random.normal(200, 50)
            else:
                amount = np.random.normal(70, 25)
            
            amount = max(10, round(amount, 2))
            
            sample_expenses.append({
                'date': d.isoformat(),
                'amount': amount,
                'category': category,
                'description': f"{category} harcamasƒ±"
            })
    
    # CSV dosyasƒ±na kaydet
    df = pd.DataFrame(sample_expenses)
    df.to_csv('data/sample_expenses.csv', index=False)
    
    print(f"‚úÖ {len(sample_expenses)} √∂rnek harcama kaydƒ± olu≈üturuldu!")

def install_requirements():
    """Gerekli k√ºt√ºphaneleri y√ºkle"""
    print("üì¶ Gerekli k√ºt√ºphaneler y√ºkleniyor...")
    
    try:
        subprocess.check_call([
            sys.executable, "-m", "pip", "install", "-r", "requirements.txt"
        ])
        print("‚úÖ K√ºt√ºphaneler ba≈üarƒ±yla y√ºklendi!")
    except subprocess.CalledProcessError:
        print("‚ùå K√ºt√ºphane y√ºkleme hatasƒ±! requirements.txt dosyasƒ±nƒ± kontrol edin.")
        return False
    return True

def create_env_file():
    """√áevre deƒüi≈ükenleri dosyasƒ± olu≈ütur"""
    print("üîß √áevre deƒüi≈ükenleri dosyasƒ± olu≈üturuluyor...")
    
    env_content = """# NeoFinX √áevre Deƒüi≈ükenleri
SECRET_KEY=neofinx-secret-key-2024-dev
JWT_SECRET_KEY=jwt-secret-string-dev
DATABASE_URL=sqlite:///data/neofinx.db
FLASK_ENV=development
FLASK_APP=backend/app.py
"""
    
    with open('.env', 'w', encoding='utf-8') as f:
        f.write(env_content)
    
    print("‚úÖ .env dosyasƒ± olu≈üturuldu!")

def run_streamlit_app():
    """Streamlit uygulamasƒ±nƒ± ba≈ülat"""
    print("üöÄ NeoFinX Dashboard ba≈ülatƒ±lƒ±yor...")
    print("üì± Tarayƒ±cƒ±nƒ±zda http://localhost:8501 adresini a√ßƒ±n")
    
    try:
        subprocess.run([sys.executable, "-m", "streamlit", "run", "dashboard.py"])
    except KeyboardInterrupt:
        print("\nüëã NeoFinX kapatƒ±lƒ±yor...")

def main():
    """Ana setup fonksiyonu"""
    print("üè¶ NeoFinX - Akƒ±llƒ± B√ºt√ße ve Harcama Asistanƒ±")
    print("=" * 50)
    print("üöÄ Kurulum ba≈ülatƒ±lƒ±yor...\n")
    
    # 1. √áevre deƒüi≈ükenleri dosyasƒ± olu≈ütur
    create_env_file()
    
    # 2. Veritabanƒ±nƒ± olu≈ütur
    create_database()
    
    # 3. √ñrnek veri olu≈ütur
    create_sample_data()
    
    print("\n" + "=" * 50)
    print("‚úÖ NeoFinX kurulumu tamamlandƒ±!")
    print("\nüìã Kullanƒ±m Talimatlarƒ±:")
    print("1. Dashboard: python -m streamlit run dashboard.py")
    print("2. Backend API: python backend/app.py")
    print("3. ML Model Test: python ml_models/expense_classifier.py")
    print("\nüí° ƒ∞pucu: √ñnce Python k√ºt√ºphanelerini y√ºkleyin:")
    print("   pip install -r requirements.txt")
    
    # Streamlit'i ba≈ülatmayƒ± sor
    response = input("\nüöÄ Dashboard'u ≈üimdi ba≈ülatmak ister misiniz? (y/N): ")
    if response.lower() in ['y', 'yes', 'evet']:
        run_streamlit_app()

if __name__ == "__main__":
    main() 