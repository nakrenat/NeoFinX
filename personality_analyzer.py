"""
NeoFinX - Ki≈üilik Profili Analizi
Harcama alƒ±≈ükanlƒ±klarƒ±na g√∂re kullanƒ±cƒ± ki≈üilik etiketleri belirleme
"""

import sqlite3
from datetime import datetime, timedelta
from typing import Dict, List, Tuple
from collections import defaultdict

class PersonalityAnalyzer:
    """Harcama verilerine g√∂re ki≈üilik profili analizi"""
    
    def __init__(self, db_path: str = 'data/neofinx.db'):
        self.db_path = db_path
        
        # Ki≈üilik profilleri tanƒ±mlarƒ±
        self.personality_profiles = {
            "alƒ±≈üveri≈ü_baƒüƒ±mlƒ±sƒ±": {
                "name": "üõçÔ∏è Alƒ±≈üveri≈ü Baƒüƒ±mlƒ±sƒ±",
                "description": "Alƒ±≈üveri≈üte kendinizi kaybediyorsunuz! Maƒüazalar sizin i√ßin bir terapi alanƒ±.",
                "emoji": "üõçÔ∏è",
                "color": "#FF6B6B",
                "tips": [
                    "Alƒ±≈üveri≈ü listesi yapƒ±n ve ona sadƒ±k kalƒ±n",
                    "24 saat kuralƒ± uygulayƒ±n - hemen almayƒ±n",
                    "B√ºt√ße limitleri belirleyin"
                ]
            },
            "yatƒ±rƒ±mcƒ±_kafasƒ±": {
                "name": "üìà Yatƒ±rƒ±mcƒ± Kafasƒ±", 
                "description": "Paranƒ±zƒ± akƒ±llƒ±ca deƒüerlendiriyorsunuz. Geleceƒüi d√º≈ü√ºnen bir yatƒ±rƒ±mcƒ±sƒ±nƒ±z!",
                "emoji": "üìà",
                "color": "#4ECDC4",
                "tips": [
                    "Portf√∂y√ºn√ºz√º √ße≈üitlendirin",
                    "D√ºzenli yatƒ±rƒ±m yapƒ±n",
                    "Risk toleransƒ±nƒ±zƒ± bilin"
                ]
            },
            "doƒüa_dostu_t√ºketici": {
                "name": "üå± Doƒüa Dostu T√ºketici",
                "description": "√áevre bilincli harcamalar yapƒ±yorsunuz. D√ºnya sizin i√ßin √∂nemli!",
                "emoji": "üå±", 
                "color": "#96CEB4",
                "tips": [
                    "S√ºrd√ºr√ºlebilir markalarƒ± tercih edin",
                    "Toplu ta≈üƒ±ma kullanƒ±n",
                    "ƒ∞kinci el alƒ±≈üveri≈üi deneyin"
                ]
            },
            "sosyal_kelebek": {
                "name": "ü¶ã Sosyal Kelebek",
                "description": "Eƒülence ve sosyalle≈üme odaklƒ±sƒ±nƒ±z. Hayat dolu bir karaktersiniz!",
                "emoji": "ü¶ã",
                "color": "#FECA57",
                "tips": [
                    "Ev partileri d√ºzenleyin",
                    "Eƒülence b√ºt√ßesi belirleyin", 
                    "Arkada≈ülarla ortak aktiviteler planlayƒ±n"
                ]
            },
            "tutumluluk_ustasƒ±": {
                "name": "üíé Tutumluluk Ustasƒ±",
                "description": "Parayla aranƒ±z √ßok iyi! Dengeli ve bilin√ßli harcamalar yapƒ±yorsunuz.",
                "emoji": "üíé",
                "color": "#54A0FF",
                "tips": [
                    "Tasarruf hedeflerinizi artƒ±rƒ±n",
                    "Acil durum fonu olu≈üturun",
                    "Finansal planlama √∂ƒürenin"
                ]
            },
            "teknoloji_gurumsu": {
                "name": "ü§ñ Teknoloji Gurumsu", 
                "description": "Teknoloji ve innovation meraklƒ±sƒ±sƒ±nƒ±z. Geleceƒüin trendlerini takip ediyorsunuz!",
                "emoji": "ü§ñ",
                "color": "#5F27CD",
                "tips": [
                    "Teknoloji b√ºt√ßesi belirleyin",
                    "Eski cihazlarƒ± satƒ±n",
                    "Ger√ßekten ihtiyacƒ±nƒ±zƒ± deƒüerlendirin"
                ]
            },
            "ev_hanƒ±mƒ±_babasƒ±": {
                "name": "üè† Ev Hanƒ±mƒ±/Babasƒ±",
                "description": "Ev ve aile odaklƒ± harcamalar yapƒ±yorsunuz. Sevdikleriniz i√ßin ya≈üƒ±yorsunuz!",
                "emoji": "üè†",
                "color": "#00D2D3",
                "tips": [
                    "Toplu alƒ±≈üveri≈ü yapƒ±n",
                    "Ev yapƒ±mƒ± yemekleri tercih edin",
                    "√áocuk aktiviteleri i√ßin b√ºt√ße ayƒ±rƒ±n"
                ]
            },
            "seyahat_a≈üƒ±ƒüƒ±": {
                "name": "‚úàÔ∏è Seyahat A≈üƒ±ƒüƒ±",
                "description": "D√ºnyayƒ± ke≈üfetmek i√ßin ya≈üƒ±yorsunuz! Deneyimler sizin i√ßin √ßok deƒüerli.",
                "emoji": "‚úàÔ∏è",
                "color": "#FF9FF3",
                "tips": [
                    "Seyahat fonu olu≈üturun",
                    "Erken rezervasyon yapƒ±n",
                    "Lokal deneyimleri tercih edin"
                ]
            },
            "gurme_a≈ü√ßƒ±": {
                "name": "üë®‚Äçüç≥ Gurme A≈ü√ßƒ±",
                "description": "Yemek sizin i√ßin bir tutku! ƒ∞yi yemek i√ßin para harcamaktan √ßekinmiyorsunuz.",
                "emoji": "üë®‚Äçüç≥",
                "color": "#FF6B9D",
                "tips": [
                    "Ev yemeƒüi yapmayƒ± √∂ƒürenin",
                    "Mevsimlik √ºr√ºnler tercih edin",
                    "Yemek b√ºt√ßesi belirleyin"
                ]
            },
            "minimalist_ya≈üam": {
                "name": "üïØÔ∏è Minimalist Ya≈üam",
                "description": "Az ama √∂z! Sadece ger√ßekten ihtiyacƒ±nƒ±z olan ≈üeyleri alƒ±yorsunuz.",
                "emoji": "üïØÔ∏è",
                "color": "#C44569",
                "tips": [
                    "Kaliteli √ºr√ºnler tercih edin",
                    "√áok ama√ßlƒ± e≈üyalar alƒ±n",
                    "D√ºzenli temizlik yapƒ±n"
                ]
            }
        }
    
    def get_user_expenses(self, days: int = 90) -> List[Dict]:
        """Son N g√ºn√ºn harcamalarƒ±nƒ± getir"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            since_date = (datetime.now() - timedelta(days=days)).strftime('%Y-%m-%d')
            
            cursor.execute('''
            SELECT e.amount, e.date, e.description, c.name as category_name, e.created_at
            FROM expenses e
            JOIN categories c ON e.category_id = c.id
            WHERE e.date >= ?
            ORDER BY e.date DESC
            ''', (since_date,))
            
            expenses = []
            for row in cursor.fetchall():
                expenses.append({
                    'amount': row[0],
                    'date': row[1],
                    'description': row[2],
                    'category': row[3],
                    'created_at': row[4]
                })
            
            conn.close()
            return expenses
            
        except Exception as e:
            print(f"Harcama verileri getirilemedi: {e}")
            return []
    
    def analyze_spending_patterns(self, expenses: List[Dict]) -> Dict:
        """Harcama desenlerini analiz et"""
        if not expenses:
            return {}
        
        # Kategori bazlƒ± analiz
        category_spending = defaultdict(float)
        category_frequency = defaultdict(int)
        total_spending = 0
        
        # Zaman bazlƒ± analiz
        weekend_spending = 0
        weekday_spending = 0
        
        # Miktar bazlƒ± analiz
        high_amount_count = 0  # 1000‚Ç∫ √ºzeri
        small_amount_count = 0  # 100‚Ç∫ altƒ±
        
        for expense in expenses:
            amount = expense['amount']
            category = expense['category'].lower()
            date = datetime.strptime(expense['date'], '%Y-%m-%d')
            
            # Kategori istatistikleri
            category_spending[category] += amount
            category_frequency[category] += 1
            total_spending += amount
            
            # Zaman analizi
            if date.weekday() >= 5:  # Cumartesi-Pazar
                weekend_spending += amount
            else:
                weekday_spending += amount
            
            # Miktar analizi
            if amount >= 1000:
                high_amount_count += 1
            elif amount <= 100:
                small_amount_count += 1
        
        # Y√ºzde hesaplamalarƒ±
        category_percentages = {}
        if total_spending > 0:
            for category, amount in category_spending.items():
                category_percentages[category] = (amount / total_spending) * 100
        
        return {
            'category_percentages': category_percentages,
            'category_spending': dict(category_spending),
            'category_frequency': dict(category_frequency),
            'total_spending': total_spending,
            'weekend_vs_weekday': {
                'weekend_percentage': (weekend_spending / total_spending * 100) if total_spending > 0 else 0,
                'weekday_percentage': (weekday_spending / total_spending * 100) if total_spending > 0 else 0
            },
            'spending_behavior': {
                'high_amount_ratio': (high_amount_count / len(expenses)) * 100,
                'small_amount_ratio': (small_amount_count / len(expenses)) * 100,
                'average_spending': total_spending / len(expenses) if expenses else 0
            },
            'expense_count': len(expenses)
        }
    
    def determine_personality_profile(self, patterns: Dict) -> Dict:
        """Harcama desenlerine g√∂re ki≈üilik profili belirle"""
        if not patterns or patterns.get('expense_count', 0) < 5:
            return {
                'profile': 'yeni_kullanƒ±cƒ±',
                'name': 'üåü Yeni Kullanƒ±cƒ±',
                'description': 'Hen√ºz yeni ba≈ülƒ±yorsunuz! Daha fazla veri toplandƒ±k√ßa ki≈üiliƒüinizi ke≈üfedeceƒüiz.',
                'emoji': 'üåü',
                'color': '#A0A0A0',
                'confidence': 0,
                'tips': ['D√ºzenli harcama kayƒ±tlarƒ± tutun', 'B√ºt√ße hedefleri belirleyin']
            }
        
        category_percentages = patterns.get('category_percentages', {})
        behavior = patterns.get('spending_behavior', {})
        weekend_data = patterns.get('weekend_vs_weekday', {})
        
        scores = {}
        
        # Alƒ±≈üveri≈ü Baƒüƒ±mlƒ±sƒ±
        shopping_score = 0
        shopping_categories = ['alƒ±≈üveri≈ü', 'ki≈üisel bakƒ±m', 'giyim']
        for cat in shopping_categories:
            shopping_score += category_percentages.get(cat, 0)
        if shopping_score > 35:
            scores['alƒ±≈üveri≈ü_baƒüƒ±mlƒ±sƒ±'] = shopping_score + 20
        
        # Yatƒ±rƒ±mcƒ± Kafasƒ±  
        investment_score = 0
        if behavior.get('average_spending', 0) < 200:  # D√º≈ü√ºk ortalama harcama
            investment_score += 30
        if patterns.get('total_spending', 0) < 5000:  # D√º≈ü√ºk toplam harcama
            investment_score += 20
        scores['yatƒ±rƒ±mcƒ±_kafasƒ±'] = investment_score
        
        # Doƒüa Dostu T√ºketici
        eco_score = 0
        transport_pct = category_percentages.get('ula≈üƒ±m', 0)
        if transport_pct < 10:  # Az ula≈üƒ±m harcamasƒ±
            eco_score += 25
        if 'organik' in str(patterns.get('category_spending', {})).lower():
            eco_score += 30
        scores['doƒüa_dostu_t√ºketici'] = eco_score
        
        # Sosyal Kelebek
        social_score = 0
        social_categories = ['eƒülence', 'yemek & i√ßecek', 'dƒ±≈üarƒ±da yemek']
        for cat in social_categories:
            social_score += category_percentages.get(cat, 0)
        if weekend_data.get('weekend_percentage', 0) > 40:
            social_score += 15
        scores['sosyal_kelebek'] = social_score
        
        # Tutumluluk Ustasƒ±
        frugal_score = 0
        if behavior.get('average_spending', 0) < 150:
            frugal_score += 30
        if behavior.get('small_amount_ratio', 0) > 60:
            frugal_score += 25
        # Dengeli harcama kontrol√º
        max_category_pct = max(category_percentages.values()) if category_percentages else 0
        if max_category_pct < 40:  # Hi√ßbir kategoride a≈üƒ±rƒ± harcama yok
            frugal_score += 20
        scores['tutumluluk_ustasƒ±'] = frugal_score
        
        # Teknoloji Gurumsu
        tech_score = 0
        tech_categories = ['teknoloji', 'elektronik', 'oyun']
        for cat in tech_categories:
            tech_score += category_percentages.get(cat, 0) * 2  # Teknoloji kategorileri daha aƒüƒ±rlƒ±klƒ±
        scores['teknoloji_gurumsu'] = tech_score
        
        # Ev Hanƒ±mƒ±/Babasƒ±
        home_score = 0
        home_categories = ['market', 'ev', '√ßocuk', 'temizlik']
        for cat in home_categories:
            home_score += category_percentages.get(cat, 0)
        if weekend_data.get('weekday_percentage', 0) > 60:
            home_score += 15
        scores['ev_hanƒ±mƒ±_babasƒ±'] = home_score
        
        # Seyahat A≈üƒ±ƒüƒ±
        travel_score = 0
        travel_categories = ['seyahat', 'tatil', 'ula≈üƒ±m']
        for cat in travel_categories:
            travel_score += category_percentages.get(cat, 0)
        if behavior.get('high_amount_ratio', 0) > 20:  # Y√ºksek miktarlƒ± harcamalar
            travel_score += 15
        scores['seyahat_a≈üƒ±ƒüƒ±'] = travel_score
        
        # Gurme A≈ü√ßƒ±
        food_score = 0
        food_categories = ['yemek & i√ßecek', 'restaurant', 'gurme', 'dƒ±≈üarƒ±da yemek']
        for cat in food_categories:
            food_score += category_percentages.get(cat, 0)
        scores['gurme_a≈ü√ßƒ±'] = food_score
        
        # Minimalist Ya≈üam
        minimal_score = 0
        if patterns.get('expense_count', 0) < 30:  # Az sayƒ±da harcama
            minimal_score += 25
        if behavior.get('average_spending', 0) > 300:  # Y√ºksek ortalama (az ama kaliteli)
            minimal_score += 20
        scores['minimalist_ya≈üam'] = minimal_score
        
        # En y√ºksek skoru bul
        if not scores:
            return self.determine_personality_profile({})  # Yeni kullanƒ±cƒ± d√∂nd√ºr
        
        best_profile = max(scores.items(), key=lambda x: x[1])
        profile_key = best_profile[0]
        confidence = min(100, int(best_profile[1]))
        
        profile_data = self.personality_profiles[profile_key].copy()
        profile_data['profile'] = profile_key
        profile_data['confidence'] = confidence
        profile_data['scores'] = scores
        
        return profile_data
    
    def get_personality_insights(self, profile_data: Dict, patterns: Dict) -> List[Dict]:
        """Ki≈üilik profiline g√∂re i√ßg√∂r√ºler"""
        insights = []
        
        category_percentages = patterns.get('category_percentages', {})
        behavior = patterns.get('spending_behavior', {})
        
        # Dominant kategori
        if category_percentages:
            dominant_category = max(category_percentages.items(), key=lambda x: x[1])
            insights.append({
                'type': 'dominant_category',
                'title': f'Dominant Harcama Kategoriniz: {dominant_category[0].title()}',
                'description': f'Harcamalarƒ±nƒ±zƒ±n %{dominant_category[1]:.1f}\'i bu kategoride',
                'icon': 'üìä'
            })
        
        # Harcama davranƒ±≈üƒ±
        avg_spending = behavior.get('average_spending', 0)
        if avg_spending > 500:
            insights.append({
                'type': 'spending_behavior',
                'title': 'Y√ºksek Ortalama Harcama',
                'description': f'Ortalama harcamanƒ±z {avg_spending:.0f}‚Ç∫. L√ºks t√ºketim eƒüiliminiz var.',
                'icon': 'üíé'
            })
        elif avg_spending < 100:
            insights.append({
                'type': 'spending_behavior', 
                'title': 'D√º≈ü√ºk Ortalama Harcama',
                'description': f'Ortalama harcamanƒ±z {avg_spending:.0f}‚Ç∫. Tutumlu bir yakla≈üƒ±mƒ±nƒ±z var.',
                'icon': 'üí∞'
            })
        
        # Hafta sonu davranƒ±≈üƒ±
        weekend_data = patterns.get('weekend_vs_weekday', {})
        weekend_pct = weekend_data.get('weekend_percentage', 0)
        if weekend_pct > 50:
            insights.append({
                'type': 'weekend_behavior',
                'title': 'Hafta Sonu Harcama Eƒüilimi',
                'description': f'Harcamalarƒ±nƒ±zƒ±n %{weekend_pct:.1f}\'i hafta sonunda. Sosyal aktiviteler sizi cezbediyor!',
                'icon': 'üéâ'
            })
        
        return insights
    
    def analyze_user_personality(self, days: int = 90) -> Dict:
        """Kullanƒ±cƒ±nƒ±n ki≈üilik analizini yap"""
        # Harcama verilerini al
        expenses = self.get_user_expenses(days)
        
        # Harcama desenlerini analiz et
        patterns = self.analyze_spending_patterns(expenses)
        
        # Ki≈üilik profilini belirle
        profile = self.determine_personality_profile(patterns)
        
        # ƒ∞√ßg√∂r√ºleri √ºret
        insights = self.get_personality_insights(profile, patterns)
        
        return {
            'profile': profile,
            'patterns': patterns,
            'insights': insights,
            'analysis_date': datetime.now().isoformat(),
            'data_period_days': days
        }
    
    def get_personality_evolution(self, periods: List[int] = [30, 60, 90]) -> Dict:
        """Ki≈üilik geli≈üimini takip et"""
        evolution = {}
        
        for period in periods:
            analysis = self.analyze_user_personality(period)
            evolution[f'{period}_days'] = {
                'profile_name': analysis['profile']['name'],
                'profile_key': analysis['profile']['profile'],
                'confidence': analysis['profile']['confidence'],
                'total_spending': analysis['patterns'].get('total_spending', 0)
            }
        
        return evolution 